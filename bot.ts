/**
 * –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –∏–≥—Ä—ã "–ê—Ç–æ–º–Ω—ã–π –ü—Ä–æ–≥—Ä–µ—Å—Å"
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
 */
import { Bot, InlineKeyboard, session, Context, SessionFlavor } from "grammy";
import { ConvexHttpClient } from "convex/browser";
import { api } from "./convex/_generated/api.js";
import { Id } from "./convex/_generated/dataModel.js";

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const CONVEX_URL = process.env.CONVEX_URL;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!BOT_TOKEN) {
  throw new Error("BOT_TOKEN –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
}

if (!CONVEX_URL) {
  throw new Error("CONVEX_URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Convex
const convex = new ConvexHttpClient(CONVEX_URL);

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface SessionData {
  userId?: Id<"users">;
  state?: string;
  data?: any;
}

// –†–∞—Å—à–∏—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞, –≤–∫–ª—é—á–∞—è —Å–µ—Å—Å–∏—é
type BotContext = Context & SessionFlavor<SessionData>;

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Bot<BotContext>(BOT_TOKEN);

// –ë—É—Ñ–µ—Ä –¥–ª—è –∫–ª–∏–∫–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
const clickBuffer: Record<string, { count: number, lastFlush: number }> = {};
const CLICK_BUFFER_LIMIT = 10; // –°–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
const CLICK_BUFFER_TIMEOUT = 5000; // –¢–∞–π–º–∞—É—Ç –≤ –º—Å –¥–ª—è –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∏

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
bot.use(session({
  initial: (): SessionData => ({
    state: "idle",
    data: {}
  })
}));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command("start", async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
  const telegramId = ctx.from?.id;
  const username = ctx.from?.username;
  const firstName = ctx.from?.first_name;
  const lastName = ctx.from?.last_name;
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const result = await convex.mutation(api.users.upsertUser, {
      telegramId: telegramId!,
      username,
      firstName,
      lastName
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.userId = result.userId;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (result.isNewUser) {
      await ctx.reply(
        `üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ê—Ç–æ–º–Ω—ã–π –ü—Ä–æ–≥—Ä–µ—Å—Å"!* üåü\n\n` +
        `–¢–æ–≤–∞—Ä–∏—â ${firstName}, –≤—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –ø—É—Ç—å –∫ –Ω–∞—É—á–Ω–æ–º—É –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤—É! –í–∞—à –ø–µ—Ä–≤—ã–π –∫–æ–º–ø–ª–µ–∫—Å –ö–û–õ–õ–ï–ö–¢–ò–í-1 —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç 1 –≠–Ω–µ—Ä–≥–æ–Ω –≤ —Å–µ–∫—É–Ω–¥—É.\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é –≤—Ä—É—á–Ω—É—é –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ—é –Ω–∞—É—á–Ω—É—é –∏–º–ø–µ—Ä–∏—é!`,
        {
          parse_mode: "Markdown",
          reply_markup: getMainKeyboard()
        }
      );
    } else {
      const userStatus = await convex.query(api.game.getUserStatus, {
        userId: result.userId
      });
      
      await ctx.reply(
        `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, —Ç–æ–≤–∞—Ä–∏—â ${firstName}!\n\n` +
        `üí° –£ –≤–∞—Å ${userStatus.energons} –≠–Ω–µ—Ä–≥–æ–Ω–æ–≤\n` +
        `‚öõÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: ${userStatus.totalProduction} –µ–¥./—Å–µ–∫\n` +
        `‚ö° –ú–æ—â–Ω–æ—Å—Ç—å –∫–ª–∏–∫–∞: ${userStatus.clickPower} –≠–Ω–µ—Ä–≥–æ–Ω–æ–≤`,
        {
          reply_markup: getMainKeyboard()
        }
      );
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –Ω–∞—É—á–Ω–æ–π –±–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.command("profile", async (ctx) => {
  try {
    if (!ctx.session.userId) {
      return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start");
    }
    
    const user = await convex.query(api.users.getUserByTelegramId, {
      telegramId: ctx.from?.id!
    });
    
    if (!user) {
      return ctx.reply("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
    }
    
    const userStatus = await convex.query(api.game.getUserStatus, {
      userId: ctx.session.userId
    });
    
    let boosterInfo = "";
    if (userStatus.activeBooster) {
      const minutes = Math.floor(userStatus.activeBooster.timeLeft / 60);
      const seconds = userStatus.activeBooster.timeLeft % 60;
      boosterInfo = `\n\nüöÄ *–ê–∫—Ç–∏–≤–Ω—ã–π –±—É—Å—Ç–µ—Ä:* ${userStatus.activeBooster.name}\n` +
                    `‚è± –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: ${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
    
    await ctx.reply(
      `üìä *–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—É—á–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞*\n\n` +
      `üë§ *${user.firstName || "–¢–æ–≤–∞—Ä–∏—â"}*\n` +
      `üí° *–≠–Ω–µ—Ä–≥–æ–Ω—ã:* ${userStatus.energons}\n` +
      `üî¨ *–ù–µ–π—Ç—Ä–æ–Ω—ã:* ${userStatus.neutrons}\n` +
      `‚ú® *–ö–≤–∞–Ω—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏—Ü—ã:* ${userStatus.particles}\n\n` +
      `‚ö° *–ú–æ—â–Ω–æ—Å—Ç—å –∫–ª–∏–∫–∞:* ${userStatus.clickPower}\n` +
      `‚öõÔ∏è *–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ:* ${userStatus.totalProduction} –µ–¥./—Å–µ–∫${boosterInfo}`,
      {
        parse_mode: "Markdown",
        reply_markup: getMainKeyboard()
      }
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /complexes - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–æ–≤
bot.command("complexes", async (ctx) => {
  try {
    if (!ctx.session.userId) {
      return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start");
    }
    
    await showComplexesMenu(ctx);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–ª–µ–∫—Å–æ–≤:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –Ω–∞—É—á–Ω—ã–º –∫–æ–º–ø–ª–µ–∫—Å–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /boosters - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É—Å—Ç–µ—Ä–∞–º–∏
bot.command("boosters", async (ctx) => {
  try {
    if (!ctx.session.userId) {
      return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start");
    }
    
    await showBoostersMenu(ctx);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—É—Å—Ç–µ—Ä–æ–≤:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /daily - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
bot.command("daily", async (ctx) => {
  try {
    if (!ctx.session.userId) {
      return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start");
    }
    
    const user = await convex.query(api.users.getUserByTelegramId, {
      telegramId: ctx.from?.id!
    });
    
    if (user?.dailyBonusClaimed) {
      await ctx.reply(
        "üïí –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!\n\n" +
        "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞.",
        {
          reply_markup: getMainKeyboard()
        }
          );
        } else {
      // –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å
      await ctx.reply(
        "üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +500 –≠–Ω–µ—Ä–≥–æ–Ω–æ–≤!",
        {
          reply_markup: getMainKeyboard()
        }
      );
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /leaderboard - —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤
bot.command("leaderboard", handleLeaderboardCommand);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–≥—Ä–µ
bot.command("help", async (ctx) => {
  await ctx.reply(
    "üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–≥—Ä–µ ¬´–ê—Ç–æ–º–Ω—ã–π –ü—Ä–æ–≥—Ä–µ—Å—Å¬ª* üìö\n\n" +
    "üî¨ *–û—Å–Ω–æ–≤—ã –∏–≥—Ä—ã:*\n" +
    "‚Ä¢ –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´‚öõÔ∏è –†–∞—Å—â–µ–ø–∏—Ç—å –∞—Ç–æ–º¬ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≠–Ω–µ—Ä–≥–æ–Ω–æ–≤\n" +
    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≠–Ω–µ—Ä–≥–æ–Ω—ã –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—É—á–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤\n" +
    "‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç —Ä–µ—Å—É—Ä—Å—ã –¥–∞–∂–µ –∫–æ–≥–¥–∞ –≤—ã –Ω–µ –≤ –∏–≥—Ä–µ\n\n" +
    
    "üè≠ *–ù–∞—É—á–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã:*\n" +
    "‚Ä¢ –ö–û–õ–õ–ï–ö–¢–ò–í-1: –ë–∞–∑–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≠–Ω–µ—Ä–≥–æ–Ω–æ–≤\n" +
    "‚Ä¢ –ó–ê–†–Ø-–ú: –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤—Å–µ—Ö –≠–Ω–µ—Ä–≥–æ–Ω–æ–≤\n" +
    "‚Ä¢ –°–û–Æ–ó-–ê–¢–û–ú: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ù–µ–π—Ç—Ä–æ–Ω—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π\n" +
    "‚Ä¢ –ö–†–ê–°–ù–´–ô –¶–ò–ö–õ–û–¢–†–û–ù: –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–∫–æ–≤\n" +
    "‚Ä¢ –ê–ö–ê–î–ï–ú–ì–û–†–û–î-17: –û–±—É—á–∞–µ—Ç –Ω–∞—É—á–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n" +
    "‚Ä¢ –°–ü–£–¢–ù–ò–ö-–ì–ê–ú–ú–ê: –î–∞–µ—Ç –±–æ–Ω—É—Å—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n" +
    "‚Ä¢ –ö–í–ê–ù–¢-–°–ò–ë–ò–†–¨: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ö–≤–∞–Ω—Ç–æ–≤—ã–µ –ß–∞—Å—Ç–∏—Ü—ã\n\n" +
    
    "üîß *–ö–æ–º–∞–Ω–¥—ã:*\n" +
    "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n" +
    "/profile - –í–∞—à –Ω–∞—É—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å\n" +
    "/complexes - –í–∞—à–∏ –Ω–∞—É—á–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã\n" +
    "/boosters - –í—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å–∏–ª–µ–Ω–∏—è\n" +
    "/daily - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n" +
    "/leaderboard - –†–µ–π—Ç–∏–Ω–≥ –Ω–∞—É—á–Ω—ã—Ö –∏–º–ø–µ—Ä–∏–π\n" +
    "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n" +
    
    "–£–¥–∞—á–∏ –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≤–µ–ª–∏–∫–æ–π –Ω–∞—É—á–Ω–æ–π –∏–º–ø–µ—Ä–∏–∏! üöÄ",
    {
      parse_mode: "Markdown",
      reply_markup: getMainKeyboard()
    }
  );
});

// –ë–∞–∑–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
function getMainKeyboard() {
  return new InlineKeyboard()
    .row().text("‚öõÔ∏è –†–∞—Å—â–µ–ø–∏—Ç—å –∞—Ç–æ–º", "click_atom")
    .row()
      .text("üè≠ –ö–æ–º–ø–ª–µ–∫—Å—ã", "show_complexes")
      .text("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "show_profile")
    .row()
      .text("üöÄ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∏", "show_boosters")
      .text("üìä –†–µ–π—Ç–∏–Ω–≥", "show_leaderboard");
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
bot.on("callback_query:data", async (ctx) => {
  try {
    if (!ctx.session.userId) {
      return ctx.answerCallbackQuery("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥—ã /start");
    }
    
    const callbackData = ctx.callbackQuery.data;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∞—Ç–æ–º—É
    if (callbackData === "click_atom") {
      const userId = ctx.session.userId;
      const userIdStr = userId.toString();
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
      if (!clickBuffer[userIdStr]) {
        clickBuffer[userIdStr] = { count: 0, lastFlush: Date.now() };
      }
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –≤ –±—É—Ñ–µ—Ä–µ
      clickBuffer[userIdStr].count++;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const shouldFlush = 
        clickBuffer[userIdStr].count >= CLICK_BUFFER_LIMIT || 
        Date.now() - clickBuffer[userIdStr].lastFlush > CLICK_BUFFER_TIMEOUT;
      
      if (shouldFlush) {
        const clickCount = clickBuffer[userIdStr].count;
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ—â–Ω–æ—Å—Ç–∏ –∫–ª–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userStatus = await convex.query(api.game.getUserStatus, {
          userId: ctx.session.userId
        });
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ –∫–ª–∏–∫–∏
        const energonsToAdd = Math.floor(clickCount * userStatus.clickPower);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        await convex.mutation(api.users.addResources, {
          userId,
          energons: energonsToAdd,
          neutrons: 0,
          particles: 0,
          source: "manual_click"
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä
        clickBuffer[userIdStr] = { count: 0, lastFlush: Date.now() };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await ctx.answerCallbackQuery(`‚ö° +${energonsToAdd} —ç–Ω–µ—Ä–≥–æ–Ω–æ–≤!`);
      } else {
        // –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–ª–∏–∫
        await ctx.answerCallbackQuery("‚öõÔ∏è –ê—Ç–æ–º —Ä–∞—Å—â–µ–ø–ª–µ–Ω!");
      }
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if (callbackData === "show_complexes") {
      await showComplexesMenu(ctx);
      return;
    }
    
    if (callbackData === "show_profile") {
      await ctx.reply("/profile");
      return;
    }
    
    if (callbackData === "show_boosters") {
      await showBoostersMenu(ctx);
      return;
    }
    
    if (callbackData === "show_leaderboard") {
      await ctx.deleteMessage();
      await ctx.reply("–ó–∞–≥—Ä—É–∂–∞—é —Ä–µ–π—Ç–∏–Ω–≥...");
      await handleLeaderboardCommand(ctx);
      return;
    }
    
    // –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –∫–æ–ª–±—ç–∫ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    await ctx.answerCallbackQuery("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±—ç–∫–∞:", error);
    await ctx.answerCallbackQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
  }
});

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—É—á–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤
async function showComplexesMenu(ctx: BotContext) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const complexes = await convex.query(api.game.getUserComplexes, {
      userId: ctx.session.userId!
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è
    const sortedComplexes = [
      "KOLLEKTIV-1", "ZARYA-M", "SOYUZ-ATOM", "KRASNIY-CIKLOTRON", 
      "AKADEMGOROD-17", "SPUTNIK-GAMMA", "KVANT-SIBIR", "MATERIYA-3", 
      "MOZG-MACHINA", "POLYUS-K88"
    ];
    
    const keyboard = new InlineKeyboard();
    
    let messageText = "üè≠ *–í–∞—à–∏ –Ω–∞—É—á–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã:*\n\n";
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ
    for (const complexType of sortedComplexes) {
      const complex = complexes.find(c => c.type === complexType);
      
      if (complex) {
        // –ö–æ–º–ø–ª–µ–∫—Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç
        messageText += `*${complex.name}* (–£—Ä. ${complex.level})\n`;
        messageText += `‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: ${complex.production} –µ–¥./—Å–µ–∫\n\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ª—É—á—à–µ–Ω–∏—è
        keyboard.row().text(
          `üîß –£–ª—É—á—à–∏—Ç—å ${complex.name} (${complex.upgradeCost} –≠)`, 
          `upgrade_complex:${complexType}`
    );
  } else {
        // –ö–æ–º–ø–ª–µ–∫—Å –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã—Ç
        const complexInfo = await convex.query(api.game.getComplexUpgradeCost, {
          userId: ctx.session.userId!,
          complexType
        });
        
        if (complexInfo.isUnlocked) {
          // –ö–æ–º–ø–ª–µ–∫—Å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏
          messageText += `*${complexInfo.name}* (–ù–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω)\n`;
          messageText += `üîì –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞\n\n`;
          
          keyboard.row().text(
            `üèó –ü–æ—Å—Ç—Ä–æ–∏—Ç—å ${complexInfo.name} (${complexInfo.energonCost} –≠)`,
            `buy_complex:${complexType}`
          );
        } else if (complexInfo.requiredComplex) {
          // –ö–æ–º–ø–ª–µ–∫—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
          messageText += `üîí *${complexInfo.name}*\n`;
          messageText += `–¢—Ä–µ–±—É–µ—Ç—Å—è: ${complexInfo.requiredComplex} —É—Ä. ${complexInfo.requiredLevel}\n\n`;
        }
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.row().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_main");
    
    await ctx.reply(messageText, {
      parse_mode: "Markdown",
      reply_markup: keyboard
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–æ–≤:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–ª–µ–∫—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –±—É—Å—Ç–µ—Ä–æ–≤
async function showBoostersMenu(ctx: BotContext) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±—É—Å—Ç–µ—Ä—ã –∏ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userStatus = await convex.query(api.game.getUserStatus, {
      userId: ctx.session.userId!
    });
    
    const boosters = await convex.query(api.game.getAvailableBoosters, {
      userId: ctx.session.userId!
    });
    
    let messageText = "üöÄ *–ù–∞—É—á–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–±—É—Å—Ç–µ—Ä—ã):*\n\n";
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –±—É—Å—Ç–µ—Ä–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (userStatus.activeBooster) {
      const minutes = Math.floor(userStatus.activeBooster.timeLeft / 60);
      const seconds = userStatus.activeBooster.timeLeft % 60;
      
      messageText += `*–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞:* ${userStatus.activeBooster.name}\n`;
      messageText += `‚è± –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: ${minutes}:${seconds.toString().padStart(2, '0')}\n\n`;
    } else {
      messageText += "*–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫*\n\n";
    }
    
    messageText += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:\n\n";
    
    const keyboard = new InlineKeyboard();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±—É—Å—Ç–µ—Ä
    for (const booster of boosters) {
      messageText += `üî¨ *${booster.name}*\n`;
      messageText += `${booster.description}\n`;
      
      let costText = `${booster.cost.energons} –≠`;
      if (booster.cost.neutrons) costText += ` + ${booster.cost.neutrons} –ù`;
      if (booster.cost.particles) costText += ` + ${booster.cost.particles} –ö–ß`;
      
      messageText += `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${costText}\n\n`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
      let canAfford = userStatus.energons >= booster.cost.energons;
      if (booster.cost.neutrons) canAfford = canAfford && userStatus.neutrons >= booster.cost.neutrons;
      if (booster.cost.particles) canAfford = canAfford && userStatus.particles >= booster.cost.particles;
      
      if (canAfford && !userStatus.activeBooster) {
        keyboard.row().text(`–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ${booster.name}`, `activate_booster:${booster.type}`);
      }
    }
    
    // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.row().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_main");
    
    await ctx.reply(messageText, {
      parse_mode: "Markdown",
      reply_markup: keyboard
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –±—É—Å—Ç–µ—Ä–æ–≤:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message", async (ctx) => {
  try {
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    if (!ctx.session.userId) {
      await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥—ã /start");
      return;
    }
    
    if (ctx.message.text) {
      await ctx.reply(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∞—É—á–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.\n\n" +
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /help",
        {
          reply_markup: getMainKeyboard()
        }
      );
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–±—Ä–æ—Å–∞ –±—É—Ñ–µ—Ä–∞ –∫–ª–∏–∫–æ–≤
function flushClickBuffers() {
  const now = Date.now();
  
  for (const userIdStr in clickBuffer) {
    const buffer = clickBuffer[userIdStr];
    
    if (buffer.count > 0 && now - buffer.lastFlush > CLICK_BUFFER_TIMEOUT) {
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏
        convex.mutation(api.users.addResources, {
          userId: userIdStr as Id<"users">,
          energons: buffer.count,
          neutrons: 0,
          particles: 0,
          source: "manual_click"
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä
        clickBuffer[userIdStr] = { count: 0, lastFlush: now };
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±—É—Ñ–µ—Ä–∞ –∫–ª–∏–∫–æ–≤ –¥–ª—è ${userIdStr}:`, error);
      }
    }
  }
  
  // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  setTimeout(flushClickBuffers, 10000);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞
flushClickBuffers();

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if (process.env.NODE_ENV === "production" && process.env.WEBHOOK_URL) {
  const webhookUrl = process.env.WEBHOOK_URL;
  console.log(`–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ ${webhookUrl}`);
  
  bot.api.setWebhook(webhookUrl);
} else {
  console.log("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞");
  bot.start();
}

// –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Ñ–∞–π–ª–∞
async function handleLeaderboardCommand(ctx: BotContext) {
  try {
    if (!ctx.session.userId) {
      return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start");
    }
    
    const leaderboard = await convex.query(api.game.getUsersLeaderboard, {
      limit: 10 // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤
    });
    
    if (leaderboard.length === 0) {
      return ctx.reply("–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
    
    let leaderboardText = "üèÜ *–¢–û–ü –ù–ê–£–ß–ù–´–• –ò–ú–ü–ï–†–ò–ô* üèÜ\n\n";
    
    leaderboard.forEach((entry: any, index: number) => {
      const medal = index === 0 ? "ü•á" : index === 1 ? "ü•à" : index === 2 ? "ü•â" : `${index + 1}.`;
      const name = entry.firstName || entry.username || "–£—á–µ–Ω—ã–π";
      leaderboardText += `${medal} *${name}*\n`;
      leaderboardText += `‚öõÔ∏è ${entry.totalProduction} –µ–¥/—Å–µ–∫ | üí° ${entry.energons} —ç–Ω–µ—Ä–≥–æ–Ω–æ–≤\n\n`;
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ —Ç–æ–ø–µ
    const userPosition = await convex.query(api.game.getUserLeaderboardPosition, { 
      userId: ctx.session.userId 
    });
    
    if (userPosition && userPosition.position > 10) {
      leaderboardText += `...\n*–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:* #${userPosition.position}\n`;
      leaderboardText += `‚öõÔ∏è ${userPosition.totalProduction} –µ–¥/—Å–µ–∫ | üí° ${userPosition.energons} —ç–Ω–µ—Ä–≥–æ–Ω–æ–≤`;
    }
    
    await ctx.reply(leaderboardText, {
      parse_mode: "Markdown",
      reply_markup: getMainKeyboard()
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

export default bot;