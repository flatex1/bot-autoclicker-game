/**
 * –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –∏–≥—Ä—ã —Å –∫–ª–∏–∫–∞–º–∏
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–æ–π –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–∫–æ–≤
 */
import { Bot, InlineKeyboard, session, Context, SessionFlavor } from "grammy";
import { ConvexHttpClient } from "convex/browser";
import { api } from "./convex/_generated/api";
import { Id } from "./convex/_generated/dataModel";

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const CONVEX_URL = process.env.CONVEX_URL;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!BOT_TOKEN) {
  throw new Error("BOT_TOKEN –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
}

if (!CONVEX_URL) {
  throw new Error("CONVEX_URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Convex
const convex = new ConvexHttpClient(CONVEX_URL);

/**
 * –°–∏—Å—Ç–µ–º–∞ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–∫–æ–≤
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–∫–∞–ø–ª–∏–≤–∞—è –∫–ª–∏–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
 */
// –ë—É—Ñ–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–∫–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
const clickBuffer = new Map<string, number>(); 
// –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—É—Ñ–µ—Ä–∞ –≤ –ë–î (60 —Å–µ–∫—É–Ω–¥)
const BUFFER_FLUSH_INTERVAL = 60000; 

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–ª–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±—É—Ñ–µ—Ä
 * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Convex
 * @param amount –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
 */
function addClickToBuffer(userId: string, amount: number = 1) {
  const currentClicks = clickBuffer.get(userId) || 0;
  clickBuffer.set(userId, currentClicks + amount);
  console.log(`–ë—É—Ñ–µ—Ä –¥–ª—è ${userId}: ${currentClicks + amount} –∫–ª–∏–∫–æ–≤`);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Convex
 * @returns Promise, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∫–ª–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
 */
async function flushUserBuffer(userId: string) {
  const clicks = clickBuffer.get(userId);
  if (!clicks) return;
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏ –≤ –ë–î
    await convex.mutation(api.users.addClicks, {
      userId: userId as Id<"users">,
      clicks,
      source: "buffer_flush"
    });
    console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${clicks} –∫–ª–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    clickBuffer.delete(userId);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—É—Ñ–µ—Ä–∞ –¥–ª—è ${userId}:`, error);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
 */
async function flushAllBuffers() {
  console.log("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–∫–æ–≤...");
  const userIds = Array.from(clickBuffer.keys());
  
  if (userIds.length === 0) {
    console.log("–ë—É—Ñ–µ—Ä –ø—É—Å—Ç, –Ω–µ—Ç –∫–ª–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏");
    return;
  }
  
  for (const userId of userIds) {
    await flushUserBuffer(userId);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –±—É—Ñ–µ—Ä–∞ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
console.log(`–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–∫–æ–≤ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ ${BUFFER_FLUSH_INTERVAL / 1000} —Å–µ–∫—É–Ω–¥`);
setInterval(flushAllBuffers, BUFFER_FLUSH_INTERVAL);

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Å—Å–∏–∏
interface SessionData {
  lastInteraction: number;
  awaitingPromoCode: boolean;
}

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
type MyContext = Context & SessionFlavor<SessionData>;

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º
const bot = new Bot<MyContext>(BOT_TOKEN);

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.use(session({
  initial: (): SessionData => ({ lastInteraction: Date.now(), awaitingPromoCode: false })
}));

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  console.error("–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:", err);
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */
bot.command("start", async (ctx) => {
  const telegramId = ctx.from?.id;
  const username = ctx.from?.username;
  const firstName = ctx.from?.first_name;
  const lastName = ctx.from?.last_name;
  
  if (!telegramId) {
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    return;
  }

  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º IP –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
    const sessionId = `session_${telegramId}_${Date.now()}`;
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const userResult = await convex.mutation(api.users.upsertUser, {
      telegramId,
      username,
      firstName,
      lastName,
      sessionId,
    });
    
    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = createMainKeyboard();
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –Ω–æ–≤—ã–π —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
    const welcomeMessage = userResult.isNewUser
      ? `–ü—Ä–∏–≤–µ—Ç, ${firstName || "–∏–≥—Ä–æ–∫"}! üëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É-–∫–ª–∏–∫–µ—Ä. –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∫–ª–∏–∫–∏.\n\n–ö—É–ø–∏ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∫–ª–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!`
      : `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${firstName || "–∏–≥—Ä–æ–∫"}! üëã\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π –∫–ª–∏–∫–∞—Ç—å –∏–ª–∏ —É–ª—É—á—à–∞–π —Å–≤–æ–π –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä!`;
    
    await ctx.reply(welcomeMessage, { reply_markup: keyboard });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–≥—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
 */
function createMainKeyboard() {
  return new InlineKeyboard()
    .text("üéÆ –ò–≥—Ä–∞—Ç—å", "menu_play")
    .text("üõç –ú–∞–≥–∞–∑–∏–Ω", "menu_shop")
    .row()
    .text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "menu_stats")
    .text("üèÜ –†–µ–π—Ç–∏–Ω–≥", "menu_leaderboard")
    .row()
    .text("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "menu_help")
    .text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "menu_settings");
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –º–µ–Ω—é
 */
function createPlayKeyboard() {
  return new InlineKeyboard()
    .text("üëÜ –ö–ª–∏–∫–Ω—É—Ç—å", "click")
    .text("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "refresh_stats")
    .row()
    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu_main");
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
 */
function createShopKeyboard() {
  return new InlineKeyboard()
    .text("ü§ñ –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä", "buy_autoclick")
    .text("‚ö°Ô∏è –ë—É—Å—Ç–µ—Ä x2", "buy_booster")
    .row()
    .text("üé≤ –ë–æ–Ω—É—Å", "daily_bonus")
    .text("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", "enter_promo")
    .row()
    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu_main");
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function createStatsKeyboard() {
  return new InlineKeyboard()
    .text("üìà –û–±—â–∞—è", "stats_general")
    .text("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è", "stats_detailed")
    .row()
    .text("üìÖ –ò—Å—Ç–æ—Ä–∏—è", "stats_history")
    .text("üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "stats_achievements")
    .row()
    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu_main");
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
 */
bot.on("callback_query:data", async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  const telegramId = ctx.from.id;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await convex.query(api.users.getUserByTelegramId, {
      telegramId,
    });
    
    if (!user) {
      await ctx.answerCallbackQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start");
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
    if (user.banned) {
      await ctx.answerCallbackQuery("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.");
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    ctx.session.lastInteraction = Date.now();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
    switch (callbackData) {
      // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      case "menu_main":
        await ctx.editMessageText("üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", { 
          reply_markup: createMainKeyboard() 
        });
        break;

      // –ò–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é
      case "menu_play":
        await ctx.editMessageText(
          "üéÆ –ò–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é\n\n" +
          `–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.clicks + (clickBuffer.get(user._id) || 0)} –∫–ª–∏–∫–æ–≤\n` +
          `–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä: ${user.autoClicksPerSecond} –∫–ª–∏–∫–æ–≤/—Å–µ–∫`,
          { reply_markup: createPlayKeyboard() }
        );
        break;

      // –ú–∞–≥–∞–∑–∏–Ω
      case "menu_shop":
        const upgradeCost = await convex.query(api.game.getUpgradeCost, {
          userId: user._id as Id<"users">,
          upgradeType: "autoclick",
        });
        await ctx.editMessageText(
          "üõç –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π\n\n" +
          `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.clicks} –∫–ª–∏–∫–æ–≤\n` +
          `ü§ñ –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞: ${upgradeCost} –∫–ª–∏–∫–æ–≤\n` +
          `‚ö°Ô∏è –ë—É—Å—Ç–µ—Ä x2 (30 –º–∏–Ω—É—Ç): 1000 –∫–ª–∏–∫–æ–≤\n` +
          `üé≤ –ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: 12:34:56`,
          { reply_markup: createShopKeyboard() }
        );
        break;

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      case "menu_stats":
        await ctx.editMessageText(
          "üìä –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n" +
          "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
          { reply_markup: createStatsKeyboard() }
        );
        break;

      // –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      case "daily_bonus":
        await handleDailyBonus(ctx, user);
        break;

      case "enter_promo":
        await handlePromoCode(ctx, user);
        break;

      case "stats_achievements":
        await handleAchievements(ctx, user);
        break;

      case "buy_booster":
        await handleBuyBooster(ctx, user);
        break;

      case "refresh_stats":
        await handleRefreshStats(ctx, user);
        break;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
      case "click":
        const clickResult = await convex.mutation(api.users.addClicks, {
          userId: user._id,
          clicks: 1,
          source: "manual_click"
        });
        addClickToBuffer(user._id, 1);
        await ctx.answerCallbackQuery(`+1 –∫–ª–∏–∫ (${clickBuffer.get(user._id) || 0} –≤ –±—É—Ñ–µ—Ä–µ)`);
        break;

      // –ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
      case "buy_autoclick":
        const upgradeResult = await convex.mutation(api.game.buyAutoClickUpgrade, {
          userId: user._id,
        });
        if (upgradeResult.success) {
          await ctx.answerCallbackQuery(
            `‚úÖ –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä —É–ª—É—á—à–µ–Ω –¥–æ ${upgradeResult.newLevel} —É—Ä–æ–≤–Ω—è!`
          );
        } else {
          await ctx.answerCallbackQuery(
            `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤ (–Ω—É–∂–Ω–æ ${upgradeResult.cost})`
          );
        }
        break;

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      case "stats_general":
        const stats = await convex.query(api.game.getUserStats, {
          userId: user._id,
        });
        await ctx.editMessageText(
          "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n" +
          `–í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: ${stats.totalClicks}\n` +
          `–£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞: ${stats.autoClickLevel}\n` +
          `–ö–ª–∏–∫–∏ –≤ —Å–µ–∫—É–Ω–¥—É: ${stats.clicksPerSecond}`,
          { reply_markup: createStatsKeyboard() }
        );
        break;

      case "stats_detailed":
        await handleDetailedStats(ctx, user);
        break;

      case "stats_history":
        await handleStatsHistory(ctx, user);
        break;

      case "menu_leaderboard":
        const leaderboard = await convex.query(api.game.getLeaderboard, {
          limit: 10,
        });
        
        let leaderboardText = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n";
        leaderboard.forEach((entry, index) => {
          leaderboardText += `${index + 1}. ${entry.firstName || entry.username || '–ò–≥—Ä–æ–∫'}: ${entry.clicks} –∫–ª–∏–∫–æ–≤\n`;
        });
        
        await ctx.editMessageText(leaderboardText, {
          reply_markup: new InlineKeyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu_main")
        });
        break;

      case "menu_help":
        await ctx.editMessageText(
          "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ:\n\n" +
          "üéÆ –ö–ª–∏–∫–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–∫–æ–≤\n" +
          "ü§ñ –ö—É–ø–∏—Ç–µ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–∫–æ–≤\n" +
          "‚ö°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É—Å—Ç–µ—Ä—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–ª–∏–∫–æ–≤\n" +
          "üéÅ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤\n" +
          "üé≤ –ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n\n" +
          "–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üéØ",
          { reply_markup: new InlineKeyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu_main") }
        );
        break;

      case "menu_settings":
        await ctx.editMessageText(
          "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n" +
          "üîß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
          { reply_markup: new InlineKeyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu_main") }
        );
        break;
    }
  } catch (error) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    if (error instanceof Error && error.message.includes("message is not modified")) {
      await ctx.answerCallbackQuery("–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è");
    } else {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
      await ctx.answerCallbackQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
 */
async function handleDailyBonus(ctx: any, user: any) {
  const bonusResult = await convex.mutation(api.game.claimDailyBonus, {
    userId: user._id as Id<"users">
  });

  if (bonusResult.success) {
    await ctx.answerCallbackQuery(
      `–ü–æ–ª—É—á–µ–Ω –±–æ–Ω—É—Å: ${bonusResult.amount} –∫–ª–∏–∫–æ–≤!`
    );
  } else {
    await ctx.answerCallbackQuery(
      `–ë–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: ${bonusResult.timeLeft}`
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 */
async function handleAchievements(ctx: any, user: any) {
  const achievements = await convex.query(api.game.getUserAchievements, {
    userId: user._id as Id<"users">
  });

  let text = "üèÖ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n";
  achievements.forEach((achievement: any) => {
    text += `${achievement.completed ? "‚úÖ" : "‚ùå"} ${achievement.name}\n`;
    text += `‚îî ${achievement.description}\n\n`;
  });

  await ctx.editMessageText(text, {
    reply_markup: createStatsKeyboard()
  });
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
 */
async function handlePromoCode(ctx: any, user: any) {
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
  const cancelKeyboard = new InlineKeyboard()
    .text("‚ùå –û—Ç–º–µ–Ω–∞", "menu_shop");
    
  await ctx.editMessageText(
    "üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:\n\n" +
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω—É.",
    { reply_markup: cancelKeyboard }
  );
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
  ctx.session.awaitingPromoCode = true;
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –±—É—Å—Ç–µ—Ä–∞
 */
async function handleBuyBooster(ctx: any, user: any) {
  try {
    const result = await convex.mutation(api.game.buyBooster, {
      userId: user._id as Id<"users">
    });
    
    if (result.success) {
      await ctx.answerCallbackQuery(
        `‚úÖ –ë—É—Å—Ç–µ—Ä x2 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç!`
      );
    } else {
      await ctx.answerCallbackQuery(
        result.timeLeft 
          ? `‚è≥ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±—É—Å—Ç–µ—Ä (${Math.floor(result.timeLeft / 60)}–º)`
          : `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤ (–Ω—É–∂–Ω–æ ${result.cost})`
      );
    }
  } catch (error) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±—É—Å—Ç–µ—Ä–∞");
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
async function handleRefreshStats(ctx: any, user: any) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await convex.query(api.users.getUserByTelegramId, {
      telegramId: user.telegramId,
    });
    
    if (!updatedUser) {
      throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±—É—Å—Ç–µ—Ä–∞
    const boosterStatus = await convex.query(api.game.getBoosterStatus, {
      userId: updatedUser._id as Id<"users">
    });
    
    await ctx.editMessageText(
      "üéÆ –ò–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é\n\n" +
      `üí∞ –ë–∞–ª–∞–Ω—Å: ${updatedUser.clicks + (clickBuffer.get(updatedUser._id) || 0)} –∫–ª–∏–∫–æ–≤\n` +
      `ü§ñ –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä: ${updatedUser.autoClicksPerSecond} –∫–ª–∏–∫–æ–≤/—Å–µ–∫\n` +
      (boosterStatus.active 
        ? `‚ö°Ô∏è –ë—É—Å—Ç–µ—Ä x${boosterStatus.multiplier} (${Math.floor(boosterStatus.timeLeft! / 60)}–º)\n`
        : ""),
      { reply_markup: createPlayKeyboard() }
    );
    
    await ctx.answerCallbackQuery("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
  } catch (error) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏");
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
async function handleDetailedStats(ctx: any, user: any) {
  const stats = await convex.query(api.game.getUserDetailedStats, {
    userId: user._id,
  });
  
  await ctx.editMessageText(
    "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n" +
    `–í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: ${stats.totalClicks}\n` +
    `–†—É—á–Ω—ã–µ –∫–ª–∏–∫–∏: ${stats.manualClicks}\n` +
    `–ê–≤—Ç–æ –∫–ª–∏–∫–∏: ${stats.autoClicks}\n` +
    `–ë–æ–Ω—É—Å–Ω—ã–µ –∫–ª–∏–∫–∏: ${stats.bonusClicks}\n` +
    `–°–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤: ${stats.bonusStreak || 0}`,
    { reply_markup: createStatsKeyboard() }
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π
 */
async function handleStatsHistory(ctx: any, user: any) {
  const history = await convex.query(api.game.getUserHistory, {
    userId: user._id,
  });
  
  const historyText = history
    .map((entry: any) => `${entry.event}: ${entry.value} (${new Date(entry.timestamp).toLocaleString()})`)
    .join('\n');
  
  await ctx.editMessageText(
    "üìÖ –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π:\n\n" + historyText,
    { reply_markup: createStatsKeyboard() }
  );
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.start();
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.on('SIGINT', async () => {
  console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...');
  await flushAllBuffers();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
  await flushAllBuffers();
  process.exit(0);
});