/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
 * –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –º–µ–Ω—é
 */
import { InlineKeyboard } from "grammy";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–∏–ø–∞ –∫–æ–º–ø–ª–µ–∫—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
interface ComplexKeyboardItem {
  name: string;
  type: string;
  upgradeCost:
    | number
    | {
        energons: number;
        neutrons?: number;
        particles?: number;
      };
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–∏–ø–∞ –±—É—Å—Ç–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
interface BoosterKeyboardItem {
  name: string;
  type: string;
  cost: {
    energons: number;
    neutrons?: number;
    particles?: number;
  };
}

// –ë–∞–∑–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
export function getMainKeyboard() {
  return new InlineKeyboard()
    .row()
    .text("‚öõÔ∏è –†–∞—Å—â–µ–ø–∏—Ç—å –∞—Ç–æ–º", "click_atom")
    .row()
    .text("üè≠ –ö–æ–º–ø–ª–µ–∫—Å—ã", "show_complexes")
    .text("üë§ –ö–∞–±–∏–Ω–µ—Ç", "show_cabinet")
    .row()
    .text("üöÄ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∏", "show_boosters")
    .text("üìä –†–µ–π—Ç–∏–Ω–≥", "show_leaderboard");
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –∫–æ–º–ø–ª–µ–∫—Å–æ–≤
export function getComplexesKeyboard(complexes: ComplexKeyboardItem[]) {
  const keyboard = new InlineKeyboard();

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞
  complexes.forEach((complex) => {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    let costText = "";

    if (typeof complex.upgradeCost === "number") {
      costText = `${complex.upgradeCost} –≠`;
    } else {
      costText = `${complex.upgradeCost.energons} –≠`;

      // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (complex.upgradeCost.neutrons) {
        costText += ` + ${complex.upgradeCost.neutrons} –ù`;
      }
      if (complex.upgradeCost.particles) {
        costText += ` + ${complex.upgradeCost.particles} –ö–ß`;
      }
    }

    keyboard
      .row()
      .text(
        `üîß –£–ª—É—á—à–∏—Ç—å ${complex.name} (${costText})`,
        `upgrade_complex:${complex.type}`
      );
  });

  // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  keyboard.row().text("¬´ –ù–∞–∑–∞–¥", "back_to_main");

  return keyboard;
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –±—É—Å—Ç–µ—Ä–æ–≤
export function getBoostersKeyboard(boosters: BoosterKeyboardItem[]) {
  const keyboard = new InlineKeyboard();

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—É—Å—Ç–µ—Ä–∞
  boosters.forEach((booster) => {
    keyboard
      .row()
      .text(
        `üöÄ ${booster.name} (${booster.cost.energons} –≠)`,
        `activate_booster:${booster.type}`
      );
  });

  // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  keyboard.row().text("¬´ –ù–∞–∑–∞–¥", "back_to_main");

  return keyboard;
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
export function getLeaderboardKeyboard() {
  return new InlineKeyboard()
    .row()
    .text("–ü–æ –≠–Ω–µ—Ä–≥–æ–Ω–∞–º", "leaderboard:energons")
    .text("–ü–æ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É", "leaderboard:production")
    .row()
    .text("¬´ –ù–∞–∑–∞–¥", "back_to_main");
}
