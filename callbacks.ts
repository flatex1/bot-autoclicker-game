/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
 * –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –±–æ—Ç–∞
 */
import { api } from "./convex/_generated/api.js";
import { BotContext } from "./types.js";
import { showCabinet, showComplexesMenu, showBoostersMenu, showLeaderboard, showComplexDetails, showComplexBuyDetails, showAvailableComplexes } from "./menus.js";
import { getMainKeyboard } from "./keyboards.js";

// –ë—É—Ñ–µ—Ä –¥–ª—è –∫–ª–∏–∫–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
const clickBuffer: Record<string, { count: number, lastFlush: number }> = {};
const CLICK_BUFFER_LIMIT = 10; // –°–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
const CLICK_BUFFER_TIMEOUT = 5000; // –¢–∞–π–º–∞—É—Ç –≤ –º—Å –¥–ª—è –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∏

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∞—Ç–æ–º—É
export async function handleAtomClick(ctx: BotContext) {
  const userId = ctx.session.userId;
  if (!userId) {
    return ctx.answerCallbackQuery("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥—ã /start");
  }
  
  const userIdStr = userId.toString();
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
  if (!clickBuffer[userIdStr]) {
    clickBuffer[userIdStr] = { count: 0, lastFlush: Date.now() };
  }
  
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –≤ –±—É—Ñ–µ—Ä–µ
  clickBuffer[userIdStr].count++;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const shouldFlush = 
    clickBuffer[userIdStr].count >= CLICK_BUFFER_LIMIT || 
    Date.now() - clickBuffer[userIdStr].lastFlush > CLICK_BUFFER_TIMEOUT;
  
  if (shouldFlush) {
    const clickCount = clickBuffer[userIdStr].count;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ—â–Ω–æ—Å—Ç–∏ –∫–ª–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userStatus = await ctx.convex.query(api.game.getUserStatus, {
      userId
    });
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ –∫–ª–∏–∫–∏
    const energonsToAdd = Math.floor(clickCount * userStatus.clickPower);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    await ctx.convex.mutation(api.users.addResources, {
      userId,
      energons: energonsToAdd,
      neutrons: 0,
      particles: 0,
      source: "manual_click"
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä
    clickBuffer[userIdStr] = { count: 0, lastFlush: Date.now() };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await ctx.answerCallbackQuery(`‚ö° +${energonsToAdd} —ç–Ω–µ—Ä–≥–æ–Ω–æ–≤!`);
  } else {
    // –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–ª–∏–∫
    await ctx.answerCallbackQuery("‚öõÔ∏è –ê—Ç–æ–º —Ä–∞—Å—â–µ–ø–ª–µ–Ω!");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–∞
export async function handleUpgradeComplex(ctx: BotContext, complexType: string) {
  try {
    const result = await ctx.convex.mutation(api.complexes.upgradeComplex, {
      userId: ctx.session.userId!,
      complexType
    });
    
    if (result.success) {
      await ctx.answerCallbackQuery(`üîß –ö–æ–º–ø–ª–µ–∫—Å —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è ${result.newLevel}!`);
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∫–æ–º–ø–ª–µ–∫—Å–æ–≤
      await showComplexesMenu(ctx);
    } else {
      await ctx.answerCallbackQuery(`‚ùå ${result.error}`);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–∞:", error);
    await ctx.answerCallbackQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–∞");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∫–æ–º–ø–ª–µ–∫—Å–∞
export async function handleBuyComplex(ctx: BotContext, complexType: string) {
  try {
    const result = await ctx.convex.mutation(api.complexes.buyComplex, {
      userId: ctx.session.userId!,
      complexType
    });
    
    if (result.success) {
      await ctx.answerCallbackQuery(`üèó –ö–æ–º–ø–ª–µ–∫—Å ${complexType} –ø–æ—Å—Ç—Ä–æ–µ–Ω!`);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∫–æ–º–ø–ª–µ–∫—Å–æ–≤
      await showComplexesMenu(ctx);
    } else {
      await ctx.answerCallbackQuery(`‚ùå ${result.error}`);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫–æ–º–ø–ª–µ–∫—Å–∞:", error);
    await ctx.answerCallbackQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫–æ–º–ø–ª–µ–∫—Å–∞");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±—É—Å—Ç–µ—Ä–∞
export async function handleActivateBooster(ctx: BotContext, boosterType: string) {
  try {
    const result = await ctx.convex.mutation(api.boosters.activateBooster, {
      userId: ctx.session.userId!,
      boosterType
    });
    
    if (result.success) {
      await ctx.answerCallbackQuery(`üöÄ –ë—É—Å—Ç–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!`);
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –±—É—Å—Ç–µ—Ä–æ–≤
      await showBoostersMenu(ctx);
    } else {
      await ctx.answerCallbackQuery(`‚ùå ${result.error}`);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±—É—Å—Ç–µ—Ä–∞:", error);
    await ctx.answerCallbackQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±—É—Å—Ç–µ—Ä–∞");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–±—ç–∫–æ–≤
export async function handleCallbacks(ctx: BotContext) {
  try {
    if (!ctx.session.userId) {
      return ctx.answerCallbackQuery("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥—ã /start");
    }
    
    const callbackData = ctx.callbackQuery?.data;

    if (!callbackData) {
      return ctx.answerCallbackQuery("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ (callbackData is undefined)");
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∞—Ç–æ–º—É
    if (callbackData === "click_atom") {
      await handleAtomClick(ctx);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if (callbackData === "show_complexes") {
      await showComplexesMenu(ctx);
      return;
    }
    
    if (callbackData === "show_cabinet") {
      await showCabinet(ctx);
      return;
    }
    
    if (callbackData === "show_boosters") {
      await showBoostersMenu(ctx);
      return;
    }
    
    if (callbackData === "show_leaderboard") {
      await ctx.deleteMessage();
      await showLeaderboard(ctx, "energons");
      return;
    }
    
    // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (callbackData === "back_to_main") {
      await ctx.editMessageReplyMarkup({ reply_markup: getMainKeyboard() });
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤
    if (callbackData === "show_available_complexes") {
      await showAvailableComplexes(ctx);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–ø–ª–µ–∫—Å–∞
    if (callbackData.startsWith("show_complex_details:")) {
      const complexType = callbackData.split(":")[1];
      await showComplexDetails(ctx, complexType);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–ø–ª–µ–∫—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    if (callbackData.startsWith("show_complex_buy_details:")) {
      const complexType = callbackData.split(":")[1];
      await showComplexBuyDetails(ctx, complexType);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∫–æ–º–ø–ª–µ–∫—Å–∞
    if (callbackData.startsWith("buy_complex:")) {
      const complexType = callbackData.split(":")[1];
      await handleBuyComplex(ctx, complexType);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–∞
    if (callbackData.startsWith("upgrade_complex:")) {
      const complexType = callbackData.split(":")[1];
      await handleUpgradeComplex(ctx, complexType);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±—É—Å—Ç–µ—Ä–∞
    if (callbackData.startsWith("activate_booster:")) {
      const boosterType = callbackData.split(":")[1];
      await handleActivateBooster(ctx, boosterType);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    if (callbackData.startsWith("leaderboard:")) {
      const leaderboardType = callbackData.split(":")[1];
      await showLeaderboard(ctx, leaderboardType);
      return;
    }
    
    // –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –∫–æ–ª–±—ç–∫ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    await ctx.answerCallbackQuery("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±—ç–∫–∞:", error);
    await ctx.answerCallbackQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
  }
}