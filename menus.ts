/**
 * –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ–Ω—é –±–æ—Ç–∞
 * –°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
 */
import { api } from "./convex/_generated/api.js";
import { BotContext } from "./types.js";
import {
  getComplexesKeyboard,
  getBoostersKeyboard,
  getMainKeyboard,
  getLeaderboardKeyboard,
} from "./keyboards.js";
import { InlineKeyboard } from "grammy";
import { BOOSTER_CONFIGS, COMPLEX_CONFIGS } from "./convex/constants.js";

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function showCabinet(ctx: BotContext) {
  try {
    if (!ctx.session.userId) {
      return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start");
    }

    const user = await ctx.convex.query(api.users.getUserByTelegramId, {
      telegramId: ctx.from?.id!,
    });

    if (!user) {
      return ctx.reply(
        "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
      );
    }

    const userStatus = await ctx.convex.query(api.game.getUserStatus, {
      userId: ctx.session.userId,
    });

    let boosterInfo = "";
    if (userStatus.activeBooster) {
      const minutes = Math.floor(userStatus.activeBooster.timeLeft / 60);
      const seconds = userStatus.activeBooster.timeLeft % 60;

      const boosterName = userStatus.activeBooster.name || "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è";

      boosterInfo =
        `\n\nüöÄ *–ê–∫—Ç–∏–≤–Ω—ã–π –±—É—Å—Ç–µ—Ä:* ${boosterName}\n` +
        `‚è± –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: ${minutes}:${seconds.toString().padStart(2, "0")}`;
    }

    await ctx.reply(
      `üìä *–ö–∞–±–∏–Ω–µ—Ç –Ω–∞—É—á–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞*\n\n` +
        `üë§ *${user.firstName || "–¢–æ–≤–∞—Ä–∏—â"}*\n` +
        `üí° *–≠–Ω–µ—Ä–≥–æ–Ω—ã:* ${userStatus.energons}\n` +
        `üî¨ *–ù–µ–π—Ç—Ä–æ–Ω—ã:* ${userStatus.neutrons}\n` +
        `‚ú® *–ö–≤–∞–Ω—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏—Ü—ã:* ${userStatus.particles}\n\n` +
        `‚ö° *–ú–æ—â–Ω–æ—Å—Ç—å –∫–ª–∏–∫–∞:* ${userStatus.clickPower}\n` +
        `‚öõÔ∏è *–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ:* ${userStatus.totalProduction} –µ–¥./—Å–µ–∫${boosterInfo}`,
      {
        parse_mode: "Markdown",
        reply_markup: getMainKeyboard(),
      }
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function showComplexesMenu(ctx: BotContext) {
  try {
    if (!ctx.session.userId) {
      return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start");
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–ª–µ–∫—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const complexes = await ctx.convex.query(api.game.getUserComplexes, {
      userId: ctx.session.userId,
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã
    const userComplexes = complexes.filter((c) => c.level > 0);

    let messageText = "üè≠ *–í–∞—à–∏ –Ω–∞—É—á–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã:*\n\n";

    if (userComplexes.length === 0) {
      messageText +=
        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—É—á–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–æ–º–ø–ª–µ–∫—Å!\n\n";
    } else {
      messageText += `–£ –≤–∞—Å ${userComplexes.length} –∫–æ–º–ø–ª–µ–∫—Å(–æ–≤).\n\n`;
    }

    const keyboard = new InlineKeyboard();

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userComplexes.forEach((complex) => {
      keyboard
        .row()
        .text(
          `${complex.name} (–£—Ä. ${complex.level}) - ${complex.production} –µ–¥./—Å–µ–∫`,
          `show_complex_details:${complex.type}`
        );
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤
    keyboard
      .row()
      .text("üèó –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∫–æ–º–ø–ª–µ–∫—Å", "show_available_complexes");

    // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.row().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_main");

    await ctx.reply(messageText, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–æ–≤:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–ª–µ–∫—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–æ–º–ø–ª–µ–∫—Å—ã
export async function showAvailableComplexes(ctx: BotContext) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–ª–µ–∫—Å—ã
    const complexes = await ctx.convex.query(api.game.getUserComplexes, {
      userId: ctx.session.userId!,
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–æ–º–ø–ª–µ–∫—Å—ã
    const availableComplexes = complexes.filter(
      (c) => c.level === 0 && c.isUnlocked
    );

    let messageText = "üèó *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–ª–µ–∫—Å—ã:*\n\n";

    if (availableComplexes.length === 0) {
      messageText +=
        "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–ª–µ–∫—Å–æ–≤.\n–£–ª—É—á—à–∞–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–ª–µ–∫—Å—ã –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö!\n\n";
    }

    const keyboard = new InlineKeyboard();

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤
    availableComplexes.forEach((complex) => {
      keyboard
        .row()
        .text(
          `${complex.name} - ${complex.upgradeCost.energons} –≠`,
          `show_complex_buy_details:${complex.type}`
        );
    });

    // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∫–æ–º–ø–ª–µ–∫—Å–æ–≤
    keyboard.row().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–º–ø–ª–µ–∫—Å–∞–º", "show_complexes");

    await ctx.reply(messageText, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–º–ø–ª–µ–∫—Å–∞
export async function showComplexDetails(ctx: BotContext, complexType: string) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–ª–µ–∫—Å–µ
    const complex = await ctx.convex.query(
      api.complexes.getComplexUpgradeCost,
      {
        userId: ctx.session.userId!,
        complexType,
      }
    );

    const complexImage =
      COMPLEX_CONFIGS[complexType as keyof typeof COMPLEX_CONFIGS]?.image;

    let messageText = `üè≠ *${complex.name} (–£—Ä–æ–≤–µ–Ω—å ${complex.currentLevel})*\n\n`;
    messageText += `‚ö° *–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ:* ${complex.production} –µ–¥./—Å–µ–∫\n`;
    messageText += `üìà *–ü–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è:* ${complex.nextProduction} –µ–¥./—Å–µ–∫\n\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–º–ø–ª–µ–∫—Å–∞
    if (complexType === "ZARYA-M") {
      messageText += `üîã *–ë–æ–Ω—É—Å –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É —ç–Ω–µ—Ä–≥–æ–Ω–æ–≤:* +${complex.currentLevel * 5}%\n`;
      messageText += `üîã *–ü–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è:* +${complex.nextLevel * 5}%\n\n`;
    } else if (complexType === "AKADEMGOROD-17") {
      messageText += `üî¨ *–ë–æ–Ω—É—Å –∫ –æ–±—â–µ–º—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É:* +${complex.currentLevel * 10}%\n`;
      messageText += `üî¨ *–ü–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è:* +${complex.nextLevel * 10}%\n\n`;
    }

    messageText += `üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è:* ${complex.energonCost} –≠–Ω–µ—Ä–≥–æ–Ω–æ–≤`;
    if (complex.neutronCost)
      messageText += `, ${complex.neutronCost} –ù–µ–π—Ç—Ä–æ–Ω–æ–≤`;
    if (complex.particleCost)
      messageText += `, ${complex.particleCost} –ö–≤–∞–Ω—Ç–æ–≤—ã—Ö —á–∞—Å—Ç–∏—Ü`;

    const keyboard = new InlineKeyboard();

    // –ö–Ω–æ–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
    keyboard
      .row()
      .text(
        `üîß –£–ª—É—á—à–∏—Ç—å –¥–æ —É—Ä–æ–≤–Ω—è ${complex.nextLevel}`,
        `upgrade_complex:${complexType}`
      );

    // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.row().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–º–ø–ª–µ–∫—Å–∞–º", "show_complexes");

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞
    if (complexImage) {
      const { InputFile } = await import("grammy");
      await ctx.replyWithPhoto(new InputFile(complexImage), {
        caption: messageText,
        parse_mode: "Markdown",
        reply_markup: keyboard,
      });
    } else {
      await ctx.reply(messageText, {
        parse_mode: "Markdown",
        reply_markup: keyboard,
      });
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–ø–ª–µ–∫—Å–∞:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–ø–ª–µ–∫—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–º–ø–ª–µ–∫—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
export async function showComplexBuyDetails(
  ctx: BotContext,
  complexType: string
) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–ª–µ–∫—Å–µ
    const complex = await ctx.convex.query(
      api.complexes.getComplexUpgradeCost,
      {
        userId: ctx.session.userId!,
        complexType,
      }
    );

    const complexConfig =
      COMPLEX_CONFIGS[complexType as keyof typeof COMPLEX_CONFIGS];
    const complexImage = complexConfig?.image;
    const complexDescription = complexConfig?.description;

    let messageText = `üèó *${complex.name}*\n\n`;

    if (complexDescription) {
      messageText += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${complexDescription}\n\n`;
    }

    messageText += `‚ö° *–ë–∞–∑–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ:* ${complex.nextProduction} –µ–¥./—Å–µ–∫\n\n`;
    messageText += `üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${complex.energonCost} –≠–Ω–µ—Ä–≥–æ–Ω–æ–≤`;
    if (complex.neutronCost)
      messageText += `, ${complex.neutronCost} –ù–µ–π—Ç—Ä–æ–Ω–æ–≤`;
    if (complex.particleCost)
      messageText += `, ${complex.particleCost} –ö–≤–∞–Ω—Ç–æ–≤—ã—Ö —á–∞—Å—Ç–∏—Ü`;

    const keyboard = new InlineKeyboard();

    // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏
    keyboard
      .row()
      .text(`üèó –ü–æ—Å—Ç—Ä–æ–∏—Ç—å ${complex.name}`, `buy_complex:${complexType}`);

    // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.row().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "show_available_complexes");

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞
    if (complexImage) {
      const { InputFile } = await import("grammy");
      await ctx.replyWithPhoto(new InputFile(complexImage), {
        caption: messageText,
        parse_mode: "Markdown",
        reply_markup: keyboard,
      });
    } else {
      await ctx.reply(messageText, {
        parse_mode: "Markdown",
        reply_markup: keyboard,
      });
    }
  } catch (error) {
    console.error(
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–ø–ª–µ–∫—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
      error
    );
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–ø–ª–µ–∫—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –±—É—Å—Ç–µ—Ä–æ–≤
export async function showBoostersMenu(ctx: BotContext) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±—É—Å—Ç–µ—Ä—ã –∏ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userStatus = await ctx.convex.query(api.game.getUserStatus, {
      userId: ctx.session.userId!,
    });

    const boosters = await ctx.convex.query(api.game.getAvailableBoosters, {
      userId: ctx.session.userId!,
    });

    let messageText = "üöÄ *–ù–∞—É—á–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏*\n\n";

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –±—É—Å—Ç–µ—Ä–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (userStatus.activeBooster) {
      const activeBoosterConfig = BOOSTER_CONFIGS[
        userStatus.activeBooster.type as keyof typeof BOOSTER_CONFIGS
      ] || { name: "–ë—É—Å—Ç–µ—Ä", description: "–ê–∫—Ç–∏–≤–Ω—ã–π –±—É—Å—Ç–µ—Ä" };

      const minutes = Math.floor(userStatus.activeBooster.timeLeft / 60);
      const seconds = userStatus.activeBooster.timeLeft % 60;

      messageText += `üî¨ *–ê–∫—Ç–∏–≤–Ω—ã–π –±—É—Å—Ç–µ—Ä:*\n`;
      messageText += `${activeBoosterConfig.name}\n`;
      messageText += `‚è± –û—Å—Ç–∞–ª–æ—Å—å: ${minutes}:${seconds.toString().padStart(2, "0")}\n\n`;
    } else {
      messageText += "*–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫*\n\n";
    }

    messageText += "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—É—Å—Ç–µ—Ä—ã:*\n\n";

    const keyboard = new InlineKeyboard();

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±—É—Å—Ç–µ—Ä
    for (const booster of boosters) {
      const boosterConfig = BOOSTER_CONFIGS[
        booster.type as keyof typeof BOOSTER_CONFIGS
      ] || { name: booster.name, description: booster.description };

      messageText += `*${boosterConfig.name}*\n`;
      messageText += `üìù ${boosterConfig.description}\n`;

      let costText = `${booster.cost.energons} –≠–Ω–µ—Ä–≥–æ–Ω–æ–≤`;
      if (booster.cost.neutrons)
        costText += ` + ${booster.cost.neutrons} –ù–µ–π—Ç—Ä–æ–Ω–æ–≤`;
      if (booster.cost.particles)
        costText += ` + ${booster.cost.particles} –ß–∞—Å—Ç–∏—Ü`;

      messageText += `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${costText}\n\n`;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
      let canAfford = userStatus.energons >= booster.cost.energons;
      if (booster.cost.neutrons)
        canAfford = canAfford && userStatus.neutrons >= booster.cost.neutrons;
      if (booster.cost.particles)
        canAfford = canAfford && userStatus.particles >= booster.cost.particles;

      if (canAfford && !userStatus.activeBooster) {
        keyboard
          .row()
          .text(
            `–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ${boosterConfig.name}`,
            `activate_booster:${booster.type}`
          );
      }
    }

    // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.row().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_main");

    await ctx.reply(messageText, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –±—É—Å—Ç–µ—Ä–æ–≤:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤
export async function showLeaderboard(ctx: BotContext, type = "energons") {
  try {
    if (!ctx.session.userId) {
      return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start");
    }

    const leaderboard = await ctx.convex.query(api.game.getUsersLeaderboard, {
      type,
      limit: 10,
    });

    if (leaderboard.length === 0) {
      return ctx.reply("–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }

    let titleMap: Record<string, string> = {
      energons: "–≠–ù–ï–†–ì–û–ù–ê–ú",
      production: "–ü–†–û–ò–ó–í–û–î–°–¢–í–£",
      neutrons: "–ù–ï–ô–¢–†–û–ù–ê–ú",
      particles: "–ö–í–ê–ù–¢–û–í–´–ú –ß–ê–°–¢–ò–¶–ê–ú",
    };

    let leaderboardText = `üèÜ *–¢–û–ü –ü–û ${titleMap[type] || "–≠–ù–ï–†–ì–û–ù–ê–ú"}* üèÜ\n\n`;

    leaderboard.forEach((entry: any, index: number) => {
      const medal =
        index === 0
          ? "ü•á"
          : index === 1
            ? "ü•à"
            : index === 2
              ? "ü•â"
              : `${index + 1}.`;
      const name = entry.firstName || entry.username || "–£—á–µ–Ω—ã–π";
      leaderboardText += `${medal} *${name}*\n`;

      if (type === "energons") {
        leaderboardText += `üí° ${entry.energons} —ç–Ω–µ—Ä–≥–æ–Ω–æ–≤ | ‚öõÔ∏è ${entry.totalProduction} –µ–¥/—Å–µ–∫\n\n`;
      } else if (type === "production") {
        leaderboardText += `‚öõÔ∏è ${entry.totalProduction} –µ–¥/—Å–µ–∫ | üí° ${entry.energons} —ç–Ω–µ—Ä–≥–æ–Ω–æ–≤\n\n`;
      } else if (type === "neutrons") {
        leaderboardText += `üî¨ ${entry.neutrons} –Ω–µ–π—Ç—Ä–æ–Ω–æ–≤ | üí° ${entry.energons} —ç–Ω–µ—Ä–≥–æ–Ω–æ–≤\n\n`;
      } else if (type === "particles") {
        leaderboardText += `‚ú® ${entry.particles} —á–∞—Å—Ç–∏—Ü | üí° ${entry.energons} —ç–Ω–µ—Ä–≥–æ–Ω–æ–≤\n\n`;
      }
    });

    const userPosition = await ctx.convex.query(
      api.game.getUserLeaderboardPosition,
      {
        userId: ctx.session.userId!,
        type,
      }
    );

    if (userPosition && userPosition.position > 10) {
      leaderboardText += `\n\n*–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: ${userPosition.position}*`;

      if (type === "energons") {
        leaderboardText += `üí° ${userPosition.energons} —ç–Ω–µ—Ä–≥–æ–Ω–æ–≤ | ‚öõÔ∏è ${userPosition.totalProduction} –µ–¥/—Å–µ–∫`;
      } else if (type === "production") {
        leaderboardText += `‚öõÔ∏è ${userPosition.totalProduction} –µ–¥/—Å–µ–∫ | üí° ${userPosition.energons} —ç–Ω–µ—Ä–≥–æ–Ω–æ–≤`;
      } else if (type === "neutrons") {
        leaderboardText += `üî¨ ${userPosition.neutrons} –Ω–µ–π—Ç—Ä–æ–Ω–æ–≤ | üí° ${userPosition.energons} —ç–Ω–µ—Ä–≥–æ–Ω–æ–≤`;
      } else if (type === "particles") {
        leaderboardText += `‚ú® ${userPosition.particles} —á–∞—Å—Ç–∏—Ü | üí° ${userPosition.energons} —ç–Ω–µ—Ä–≥–æ–Ω–æ–≤`;
      }
    }

    await ctx.reply(leaderboardText, {
      parse_mode: "Markdown",
      reply_markup: getLeaderboardKeyboard(),
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}
